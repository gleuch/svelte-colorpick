{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ColorPicker.svelte",
    "DimInput.svelte",
    "HexInput.svelte",
    "Matrix.svelte",
    "Scrollbar.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { ColorPicker, dimensions, Color } from 'svelte-colorpick'\n\n\tlet color = Color.hex('#228800')\n\tlet background = '#fff'\n\tlet collapse = false\n\n\tlet settings;\n\n\tlet handleWidth = 32\n\tlet handleHeight = 32\n\n\tlet presets = {\n\t\tfull: {\n\t\t\tselectedDimension: 'hsl.h',\n\n\t\t\ttabbed: true,\n\t\t\tselectedTab: 'hsl',\n\n\t\t\tshowMatrix: true,\n\t\t\tshowSlidersGlobal: true,\n\t\t\tshowHex: true,\n\t\t\tshowNumeric: true,\n\t\t\tshowLabels: true,\n\n\t\t\tshowSliders: {\n\t\t\t\t\"hsl.h\": true,\n\t\t\t\t\"hsl.s\": true,\n\t\t\t\t\"hsl.l\": true,\n\n\t\t\t\t\"hcl.h\": true,\n\t\t\t\t\"hcl.c\": true,\n\t\t\t\t\"hcl.l\": true,\n\n\t\t\t\t\"lab.l\": true,\n\t\t\t\t\"lab.a\": true,\n\t\t\t\t\"lab.b\": true,\n\n\t\t\t\t\"rgb.r\": true,\n\t\t\t\t\"rgb.g\": true,\n\t\t\t\t\"rgb.b\": true,\n\t\t\t},\n\n\t\t\tselectDimensions: true,\n\n\t\t\tmatrixWidth: 300,\n\t\t\tmatrixHeight: 200,\n\t\t\tscrollbarHeight: 20,\n\t\t},\n\n\t\thsl: {\n\t\t\tselectedDimension: 'hsl.h',\n\n\t\t\ttabbed: false,\n\t\t\tselectedTab: 'hsl',\n\n\t\t\tshowMatrix: true,\n\t\t\tshowSlidersGlobal: true,\n\t\t\tshowHex: true,\n\t\t\tshowNumeric: true,\n\t\t\tshowLabels: true,\n\n\t\t\tshowSliders: {\n\t\t\t\t\"hsl.h\": true,\n\t\t\t\t\"hsl.s\": true,\n\t\t\t\t\"hsl.l\": true,\n\t\t\t},\n\n\t\t\tselectDimensions: true,\n\n\t\t\tmatrixWidth: 300,\n\t\t\tmatrixHeight: 200,\n\t\t\tscrollbarHeight: 20,\n\t\t},\n\n\t\thcl: {\n\t\t\tselectedDimension: 'hcl.h',\n\n\t\t\ttabbed: false,\n\t\t\tselectedTab: 'hcl',\n\n\t\t\tshowMatrix: true,\n\t\t\tshowSlidersGlobal: true,\n\t\t\tshowHex: true,\n\t\t\tshowNumeric: true,\n\t\t\tshowLabels: true,\n\n\t\t\tshowSliders: {\n\t\t\t\t\"hcl.h\": true,\n\t\t\t\t\"hcl.c\": true,\n\t\t\t\t\"hcl.l\": true,\n\t\t\t},\n\n\t\t\tselectDimensions: true,\n\n\t\t\tmatrixWidth: 300,\n\t\t\tmatrixHeight: 200,\n\t\t\tscrollbarHeight: 20,\n\t\t},\n\n\t\tminiLab: {\n\t\t\tselectedDimension: 'lab.l',\n\n\t\t\ttabbed: false,\n\t\t\tselectedTab: 'lab',\n\n\t\t\tshowMatrix: true,\n\t\t\tshowSlidersGlobal: true,\n\t\t\tshowHex: false,\n\t\t\tshowNumeric: true,\n\t\t\tshowLabels: true,\n\n\t\t\tshowSliders: {\n\t\t\t\t\"lab.l\": true,\n\t\t\t},\n\n\t\t\tselectDimensions: false,\n\n\t\t\tmatrixWidth: 200,\n\t\t\tmatrixHeight: 200,\n\t\t\tscrollbarHeight: 20,\n\t\t},\n\n\t\tminiHsl: {\n\t\t\tselectedDimension: 'hsl.h',\n\n\t\t\ttabbed: false,\n\t\t\tselectedTab: 'hsl',\n\n\t\t\tshowMatrix: true,\n\t\t\tshowSlidersGlobal: true,\n\t\t\tshowHex: false,\n\t\t\tshowNumeric: false,\n\t\t\tshowLabels: false,\n\n\t\t\tshowSliders: {\n\t\t\t\t\"hsl.h\": true,\n\t\t\t},\n\n\t\t\tselectDimensions: false,\n\n\t\t\tmatrixWidth: 150,\n\t\t\tmatrixHeight: 150,\n\t\t\tscrollbarHeight: 10,\n\t\t},\n\n\t\tminiHcl: {\n\t\t\tselectedDimension: 'hcl.h',\n\n\t\t\ttabbed: false,\n\t\t\tselectedTab: 'hcl',\n\n\t\t\tshowMatrix: true,\n\t\t\tshowSlidersGlobal: true,\n\t\t\tshowHex: false,\n\t\t\tshowNumeric: false,\n\t\t\tshowLabels: false,\n\n\t\t\tshowSliders: {\n\t\t\t\t\"hcl.h\": true,\n\t\t\t},\n\n\t\t\tselectDimensions: false,\n\n\t\t\tmatrixWidth: 150,\n\t\t\tmatrixHeight: 150,\n\t\t\tscrollbarHeight: 10,\n\t\t},\n\t}\n\n\tfunction applyPreset (name) {\n\t\tsettings = JSON.parse(JSON.stringify(presets[name]))\n\t}\n\n\tapplyPreset('full')\n\n\t$: {\n\t\tif (color.isDark()) {\n\t\t\tdocument.body.classList.remove('dark')\n\t\t\tbackground = '#fff'\n\t\t} else {\n\t\t\tdocument.body.classList.add('dark')\n\t\t\tbackground = '#222'\n\t\t}\n\t}\n</script>\n\n<div class=\"wrapper\">\n\t<div class=\"title\">\n\t\t<h1 style=\"color: {color.toHex()};\">svelte-colorpick</h1>\n\t\t<p>A fully-featured color picker for <a href=\"https://svelte.dev\">Svelte</a>.</p>\n\t</div>\n\n\t<ul class=\"links\">\n\t\t<li><a href=\"https://github.com/sseemayer/svelte-colorpick\">GitHub</a>\n\t\t<li><a href=\"https://npmjs.com/package/svelte-colorpick\">npm</a>\n\t</ul>\n\n\n\t<h2 style=\"color: {color.toHex()};\">Demo</h2>\n\t<div class=\"layout\">\n\n\t\t<div class=\"demo-container\">\n\t\t\t<div class=\"demo\">\n\t\t\t\t<ColorPicker\n\t\t\t\t\tbind:color={color}\n\t\t\t\t\tbackground={background}\n\n\t\t\t\t\tcollapse={collapse}\n\t\t\t\t\thandleWidth={handleWidth}\n\t\t\t\t\thandleHeight={handleHeight}\n\n\t\t\t\t\ttabbed={settings.tabbed}\n\t\t\t\t\tselectedTab={settings.selectedTab}\n\n\t\t\t\t\tselectedDimension={settings.selectedDimension}\n\n\t\t\t\t\tshowMatrix={settings.showMatrix}\n\t\t\t\t\tshowSliders={settings.showSlidersGlobal && settings.showSliders}\n\t\t\t\t\tshowHex={settings.showHex}\n\t\t\t\t\tshowLabels={settings.showLabels}\n\t\t\t\t\tshowNumeric={settings.showNumeric}\n\t\t\t\t\tselectDimensions={settings.selectDimensions}\n\n\t\t\t\t\tmatrixWidth={settings.matrixWidth}\n\t\t\t\t\tmatrixHeight={settings.matrixHeight}\n\t\t\t\t\tscrollbarHeight={settings.scrollbarHeight}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class='settings-panel'>\n\t\t\t<h2 style=\"color: {color.toHex()};\">Settings</h2>\n\t\t\t<h3 style=\"color: {color.toHex()};\">Mode</h3>\n\t\t\t<div>\n\t\t\t\t<input id='collapse' type='checkbox' bind:checked={collapse}/>\n\t\t\t\t<label for='collapse'>collapse</label>\n\t\t\t\t<input id='handleWidth' type='number' min=10 max=100 bind:value={handleWidth}/>x\n\t\t\t\t<input id='handleHeight' type='number' min=10 max=100 bind:value={handleHeight}/>\n\t\t\t</div>\n\n\t\t\t<h3 style=\"color: {color.toHex()};\">Presets</h3>\n\t\t\t{#each Object.keys(presets) as preset}\n\t\t\t\t<button on:click={() => applyPreset(preset)}>{preset}</button>\n\t\t\t{/each}\n\n\t\t\t<h3 style=\"color: {color.toHex()};\">UI Elements</h3>\n\t\t\t<div>\n\t\t\t\t<input id='showMatrix' type='checkbox' bind:checked={settings.showMatrix}/>\n\t\t\t\t<label for='showMatrix'>showMatrix</label>\n\t\t\t\t<input id='matrixWidth' type='number' min=100 max=600 bind:value={settings.matrixWidth}/>x\n\t\t\t\t<input id='matrixHeight' type='number' min=100 max=600 bind:value={settings.matrixHeight}/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input id='showSliders' type='checkbox' bind:checked={settings.showSlidersGlobal}/>\n\t\t\t\t<label for='showSliders'>showSliders</label>\n\t\t\t</div>\n\t\t\t{#if settings.showSlidersGlobal}\n\t\t\t\t<div class=\"indent\">\n\t\t\t\t\t<input id='tabbed' type='checkbox' bind:checked={settings.tabbed}/>\n\t\t\t\t\t<label for='tabbed'>tabbed</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"indent\">\n\t\t\t\t\t<input id='showNumeric' type='checkbox' bind:checked={settings.showNumeric}/>\n\t\t\t\t\t<label for='showNumeric'>showNumeric</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"indent\">\n\t\t\t\t\t<input id='selectDimensions' type='checkbox' bind:checked={settings.selectDimensions}/>\n\t\t\t\t\t<label for='selectDimensions'>selectDimensions</label>\n\t\t\t\t</div>\n\n\n\t\t\t\t{#each Object.keys(dimensions) as scale}\n\t\t\t\t\t<div class=\"indent\"><span class=\"dimension\">{scale}</span>\n\n\t\t\t\t\t\t{#each Object.keys(dimensions[scale]) as dim}\n\t\t\t\t\t\t\t<div class=\"scale-dim\">\n\t\t\t\t\t\t\t\t<input id='showSliders-{scale}-{dim}' type='checkbox' bind:checked={settings.showSliders[`${scale}.${dim}`]}/>\n\t\t\t\t\t\t\t\t<label for='showSliders-{scale}-{dim}'>{dim}</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t{/if}\n\t\t\t<div>\n\t\t\t\t<input id='showLabels' type='checkbox' bind:checked={settings.showLabels}/>\n\t\t\t\t<label for='showLabels'>showLabels</label>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input id='showHex' type='checkbox' bind:checked={settings.showHex}/>\n\t\t\t\t<label for='showHex'>showHex</label>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label for='scrollbarHeight'>scroll</label>\n\t\t\t\t<input id='scrollbarHeight' type='number' min=10 max=100 bind:value={settings.scrollbarHeight}/>\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n\n\t<h2 style=\"color: {color.toHex()};\">Installation</h2>\n\n\t<code><pre>npm install --save svelte-colorpick</pre></code>\n\n\t<h2 style=\"color: {color.toHex()};\">Usage</h2>\n\n\t<code><pre>\n&lt;script&gt;\n    import &lbrace; ColorPicker, Color &rbrace; from 'svelte-colorpick'\n    let color = Color.hex('#ccff00')\n&lt;/script&gt;\n\n&lt;ColorPicker bind:color=&lbrace;color&rbrace;/&gt;\n\n&lt;p&gt;Your color is currently &lbrace;color.toHex()&rbrace;&lt;/p&gt;\n\t</pre></code>\n\n\t<h2 style=\"color: {color.toHex()};\">License</h2>\n\tMIT\n</div>\n\n<style>\n\n\th1, h2, h3, h4 {\n\t\tfont-weight: 400;\n\t}\n\n\t.title h1 {\n\t\tmargin: 10px 0 5px 0;\n\t\tfont-size: 250%;\n\t\tdisplay: inline-block;\n\t}\n\n\t.title p {\n\t\tdisplay: inline-block;\n\t\tmargin: 0;\n\t}\n\n\tul.links {\n\t\tlist-style: none;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\n\tul.links:before {\n\t\tcontent: \"> \";\n\t}\n\t\n\tul.links li {\n\t\tdisplay: inline-block;\n\t\tpadding: 3px 5px;\n\t}\n\n\tul.links li:first-child {\n\t\tpadding-left: 0;\n\t}\n\n\t.demo-container {\n\t\tmargin: 0 30px 30px 0;\n\t\tflex-grow: 10;\n\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t}\n\n\t@media (max-width: 600px) {\n\t\t.wrapper {\n\t\t\tpadding: 10px;\n\t\t}\n\t\t.layout {\n\t\t\tflex-direction: column;\n\t\t}\n\n\t\t.demo-container {\n\t\t\tmargin: 0 0 30px 0;\n\t\t}\n\t}\n\n\t.indent {\n\t\tmargin-left: 30px;\n\t}\n\n\t.dimension {\n\t\tfont-weight: bold;\n\t\tdisplay: inline-block;\n\t\twidth: 40px;\n\t\tpadding-left: 20px;\n\t}\n\n\t.scale-dim {\n\t\tdisplay: inline-block;\n\t\twidth: 30px;\n\t\tmargin-right: 5px;\n\t}\n\n\tinput[type=checkbox], label {\n\t\tdisplay: inline-block;\n\t}\n\n\t#matrixWidth, #matrixHeight, #scrollbarHeight, #handleWidth, #handleHeight {\n\t\twidth: 80px;\n\t}\n</style>\n",
    "<script>\n\timport Color from './color'\n\timport { dimensions, getDimension } from './dimensions.js'\n\n\timport ScrollBar from './Scrollbar.svelte'\n\timport Matrix from './Matrix.svelte'\n\timport DimInput from './DimInput.svelte'\n\timport HexInput from './HexInput.svelte'\n\n\texport let color = Color.hex('#ff9900')\n\n\t$: {\n\t\t\tif (typeof color === 'string') {\n\t\t\tcolor = Color.hex(color)\n\t\t}\n\t}\n\n\texport let selectedDimension = 'hsl.h'\n\texport let selectedTab = 'hsl'\n\texport let background = '#fff'\n\n\texport let collapse = false\n\texport let tabbed = false\n\n\texport let handleWidth = 32\n\texport let handleHeight = 32\n\n\texport let showMatrix = true\n\texport let showSliders = null\n\n\tif (showSliders == null) {\n\t\tfor (const scale in dimensions) {\n\t\t\tfor (const dim in dimensions[scale]) {\n\t\t\t\tshowSliders[`${scale}.${dim}`] = true\n\t\t\t}\n\t\t}\n\t}\n\n\texport let showHex = true\n\texport let showNumeric = true\n\texport let showLabels = true\n\n\texport let selectDimensions = true\n\n\texport let matrixWidth = 300\n\texport let matrixHeight = 200\n\texport let scrollbarHeight = 20\n\n\tlet collapsed = true\n\n\tlet dimX = null\n\tlet dimY = null\n\n\t$: {\n\t\tlet [scale, dim] = selectedDimension.split('.', 2)\n\t\tlet dims = Object.keys(dimensions[scale])\n\t\tdims.splice(dims.indexOf(dim), 1)\n\t\tdimX = `${scale}.${dims[0]}`\n\t\tdimY = `${scale}.${dims[1]}`\n\t}\n\n\t$: sliderWidth = matrixWidth - (selectDimensions ? 25 : 0) - (showLabels ? 25 : 0) - (showNumeric ? 65 : 0)\n\t$: textboxWidth = matrixWidth - (showLabels ? 50 : 0)\n</script>\n\n<div class='color-picker {collapse ? \"collapse\" : \"\"}'>\n\n\n\t{#if collapse && !collapsed}\n\t\t<div class='color-picker-background' on:click={() => collapsed = true}/>\n\t{/if}\n\n\t{#if collapse}\n\t<div class=\"color-picker-handle\" style='width: {handleWidth}px; height: {handleHeight}px; background: {color.toHex()};' on:click={() => collapsed = false}></div>\n\t{/if}\n\n\t<div class='color-picker-controls {collapse && collapsed ? \"collapsed\" : \"\"}' style=\"background: {background};\">\n\t\t{#if showMatrix}\n\t\t<Matrix\n\t\t\tbind:color={color}\n\t\t\tdimensionX={dimX}\n\t\t\tdimensionY={dimY}\n\t\t\twidth={matrixWidth}\n\t\t\theight={matrixHeight}\n\t\t/>\n\t\t{/if}\n\n\t\t{#if showSliders}\n\n\t\t{#if tabbed}\n\t\t<div class=\"tab-bar\">\n\t\t\t{#each Object.keys(dimensions) as scale}\n\t\t\t\t{#if Object.keys(dimensions[scale]).some((dim) => showSliders[`${scale}.${dim}`] ) }\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"tab {selectedTab === scale ? 'active' : ''}\"\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\tselectedTab = scale\n\t\t\t\t\t\t\tselectedDimension = `${scale}.${Object.keys(dimensions[scale])[0]}`\n\t\t\t\t\t\t}}\n\t\t\t\t\t>{scale}</div>\n\t\t\t\t{/if}\n\t\t\t{/each}\n\t\t</div>\n\t\t{/if}\n\n\t\t{#each Object.keys(dimensions) as scale}\n\t\t{#if !tabbed || selectedTab === scale}\n\t\t<div class=\"group\">\n\t\t\t{#each Object.keys(dimensions[scale]) as dim}\n\t\t\t\t{#if showSliders[`${scale}.${dim}`]}\n\t\t\t\t<div class=\"slider\">\n\t\t\t\t\t{#if selectDimensions}\n\t\t\t\t\t\t<input type=\"radio\" bind:group={selectedDimension} value=\"{scale}.{dim}\" id=\"{scale}-{dim}\">\n\t\t\t\t\t{/if}\n\t\t\t\t\t{#if showLabels}\n\t\t\t\t\t\t<label for=\"{scale}-{dim}\">{dim.toUpperCase()}</label>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<ScrollBar width={sliderWidth} height={scrollbarHeight} dimension=\"{scale}.{dim}\" bind:color={color}/>\n\n\t\t\t\t\t{#if showNumeric}\n\t\t\t\t\t\t<DimInput bind:color={color} dimension=\"{scale}.{dim}\"/>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t{/each}\n\t\t</div>\n\t\t{/if}\n\t\t{/each}\n\t\t{/if}\n\n\t\t{#if showHex}\n\t\t<div class=\"group\">\n\t\t\t<div class=\"text\">\n\t\t\t\t{#if showLabels}\n\t\t\t\t<label for=\"hex\">Hex</label>\n\t\t\t\t{/if}\n\t\t\t\t<HexInput bind:color={color} width={textboxWidth} id=\"hex\"/>\n\t\t\t</div>\n\t\t</div>\n\t\t{/if}\n\t</div>\n</div>\n\n\n<style>\n\t.color-picker {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t}\n\n\t.color-picker-handle {\n\t\tborder: 1px solid #666;\n\t\tborder-radius: 5px;\n\t\tcursor: pointer;\n\t}\n\n\t.color-picker-background {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: rgba(0, 0, 0, 0.2);\n\t\tz-index: 9999999;\n\t}\n\n\t.color-picker.collapse .color-picker-controls {\n\t\tposition: absolute;\n\t\ttop: -5px;\n\t\tleft: -5px;\n\n\t\tborder: 1px solid #666;\n\t\tborder-radius: 5px;\n\t\tbox-shadow: 2px 2px 5px 0px rgba(0,0,0,0.4);\n\t\tpadding: 5px;\n\n\t\tz-index: 100000000;\n\t}\n\n\t.color-picker.collapse .color-picker-controls.collapsed {\n\t\tdisplay: none;\n\t}\n\n\t.tab-bar {\n\t\tdisplay: flex;\n\t\theight: 30px;\n\t\tline-height: 30px;\n\t}\n\n\t.tab {\n\t\tmargin: 0 5px;\n\t\tpadding: 0 3px;\n\t\tborder-bottom: 1px solid #aaa;\n\t\tcursor: pointer;\n\t\ttext-transform: uppercase;\n\t\tfont-weight: bold;\n\t}\n\n\t.tab.active {\n\t\tborder-bottom-width: 3px;\n\t}\n\n\t.group {\n\t\tmargin: 5px 0 0 0;\n\t}\n\n\t.slider, .text {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\tlabel {\n\t\tdisplay: inline;\n\t\tvertical-align: middle;\n\t\tmargin: 0;\n\t}\n\n\t.slider label {\n\t\tpadding: 0 5px 0 0;\n\t\twidth: 20px;\n\t}\n\n\t.text label {\n\t\tpadding: 0 5px 0 0;\n\t\twidth: 45px;\n\t\ttext-align: right;\n\t}\n\n\tinput[type=radio] {\n\t\tdisplay: inline-block;\n\t\tmargin: 0 5px 0 0;\n\t\twidth: 20px;\n\t}\n</style>\n",
    "<script>\n\timport Color from './color'\n\timport { getDimension} from './dimensions'\n\n\texport let color = Color.hex('#00ff00')\n\texport let dimension = 'hsl.h'\n\n\t$: dim = getDimension(dimension)\n\t$: value = color.get(dim.scale, dim.dim) * dim.data.scale\n\t$: roundedValue = Math.round(value)\n\n\tfunction onChange(e) {\n\t\tlet v = +e.target.value\n\t\tcolor = color.alter(dim.scale, dim.dim, v / dim.data.scale)\n\t}\n</script>\n\n<input\n\ttype=\"number\"\n\tvalue={roundedValue}\n\tmin={dim.data.extent[0]}\n\tmax={dim.data.extent[1]}\n\ton:change={onChange}\n/>\n\n<style>\n\tinput[type=number] {\n\t\tdisplay: inline-block;\n\t\tmargin: 0 0 0 5px;\n\t\tpadding: 5px 0 5px 5px;\n\t\twidth: 60px;\n\t\theight: 30px;\n\t}\n</style>\n",
    "<script>\n\timport Color from './color'\n\n\texport let color = Color.hex('#00ff00')\n\texport let id = null\n\texport let width = null\n\n\t$: value = color.toHex()\n\n\tfunction onChange(e) {\n\t\tlet v = Color.hex(e.target.value)\n\t\tif (v.data != null) {\n\t\t\tcolor = v\n\t\t} else {\n\t\t\te.target.value = value\n\t\t}\n\t}\n</script>\n\n<input\n\tid={id}\n\tvalue={value}\n\ton:change={onChange}\n\tstyle='width: {width}px;'\n/>\n\n<style>\n\tinput {\n\t\tfont-family: monospace;\n\t\tfont-size: 120%;\n\t\tmargin: 0;\n\t\tpadding: 5px;\n\t}\n</style>\n",
    "<script>\n\timport Color from './color'\n\timport { onMount } from 'svelte'\n\n\timport { getDimension } from './dimensions'\n\timport { relativePosition } from './event'\n\timport touchToMouse from './touch'\n\n\texport let color = Color.hex('#00ff00')\n\texport let dimensionX = 'hsl.l'\n\texport let dimensionY = 'hsl.s'\n\texport let detailX = 100\n\texport let detailY = 100\n\n\texport let width = null\n\texport let height = null\n\n\tlet canvas\n\tlet ctx\n\tlet cWidth\n\tlet cHeight\n\n\tonMount(() => {\n\t\tctx = canvas.getContext('2d')\n\t\ttouchToMouse(canvas)\n\t})\n\n\t$: dimX = getDimension(dimensionX)\n\t$: dimY = getDimension(dimensionY)\n\n\t$: valueX = color.get(dimX.scale, dimX.dim) * dimX.data.scale\n\t$: valueY = color.get(dimY.scale, dimY.dim) * dimY.data.scale\n\n\t$: sliderPosX = cWidth * (valueX - dimX.data.extent[0]) / (dimX.data.extent[1] - dimX.data.extent[0])\n\t$: sliderPosY = cHeight - cHeight * (valueY - dimY.data.extent[0]) / (dimY.data.extent[1] - dimY.data.extent[0])\n\n\t$: {\n\t\tif (ctx) {\n\t\t\tctx.clearRect(0, 0, cWidth, cHeight)\n\t\t\tctx.imageSmoothingEnabled = false\n\n\t\t\tlet dX = Math.min(detailX, cWidth - 2)\n\t\t\tlet dY = Math.min(detailY, cHeight - 2)\n\t\t\tlet xStep = (cWidth - 2) / dX\n\t\t\tlet yStep = (cHeight - 2) / dY\n\t\t\tlet rangeX = dimX.data.extent[1] - dimX.data.extent[0]\n\t\t\tlet rangeY = dimY.data.extent[1] - dimY.data.extent[0]\n\n\t\t\tconst colBase = color.to(dimY.scale)\n\t\t\tfor (let y = 0; y <= dY; y++) {\n\t\t\t\tconst vY = (y / detailY * rangeY + dimY.data.extent[0]) / dimY.data.scale\n\t\t\t\tconst colY = colBase.alter(dimY.scale, dimY.dim, vY)\n\n\t\t\t\tfor(let x = 0; x <= dX; x++) {\n\t\t\t\t\tconst vX = (x / detailX * rangeX + dimX.data.extent[0]) / dimX.data.scale\n\t\t\t\t\tconst colYX = colY.alter(dimX.scale, dimX.dim, vX)\n\t\t\t\t\tctx.fillStyle = colYX.toHex()\n\t\t\t\t\tctx.fillRect(Math.round(x * xStep), Math.round((cHeight - 2) - y * yStep), Math.ceil(xStep), Math.ceil(yStep))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.fillStyle = '#ffffff'\n\t\t\tctx.fillRect(sliderPosX - 2, sliderPosY - 2, 5, 5)\n\n\t\t\tctx.fillStyle = '#000000'\n\t\t\tctx.fillRect(sliderPosX - 1, sliderPosY - 1, 3, 3)\n\t\t}\n\t}\n\n\tfunction onMouse(e) {\n\t\tif (e.buttons === 1) {\n\t\t\tconst pos = relativePosition(e)\n\t\t\tlet x = pos.relativeX\n\t\t\tlet y = (cHeight - 2) - pos.relativeY\n\n\t\t\tlet vX = (x / (cWidth - 2)) * (dimX.data.extent[1] - dimX.data.extent[0]) + dimX.data.extent[0]\n\t\t\tif (vX > dimX.data.extent[1]) { vX = dimX.data.extent[1] }\n\t\t\tif (vX < dimX.data.extent[0]) { vX = dimX.data.extent[0] }\n\n\t\t\tlet vY = (y / (cHeight - 2)) * (dimY.data.extent[1] - dimY.data.extent[0]) + dimY.data.extent[0]\n\t\t\tif (vY > dimY.data.extent[1]) { vY = dimY.data.extent[1] }\n\t\t\tif (vY < dimY.data.extent[0]) { vY = dimY.data.extent[0] }\n\n\t\t\tconst colY = color.alter(dimY.scale, dimY.dim, vY / dimY.data.scale)\n\t\t\tcolor = colY.alter(dimX.scale, dimX.dim, vX / dimX.data.scale)\n\t\t}\n\t}\n</script>\n\n<div class='matrix' bind:clientWidth={cWidth} bind:clientHeight={cHeight}>\n\t<canvas bind:this={canvas} width={width} height={height} on:mousedown={onMouse} on:mousemove={onMouse}>\n</div>\n\n<style>\n\t.matrix, canvas {\n\t\tdisplay: inline-block;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tline-height: 0;\n\t}\n\n\tcanvas {\n\t\tborder: 1px solid #666;\n\t\tborder-radius: 5px;\n\t\tcursor: crosshair;\n\t}\n</style>\n",
    "<script>\n\timport Color from './color'\n\timport { onMount } from 'svelte'\n\n\timport { getDimension } from './dimensions'\n\timport { relativePosition } from './event'\n\timport touchToMouse from './touch'\n\n\texport let color = Color.hex('#00fff00')\n\texport let dimension = 'hsl.h'\n\texport let detail = 100\n\n\texport let width = null\n\texport let height = null\n\n\tlet canvas\n\tlet ctx\n\tlet cWidth\n\tlet cHeight\n\n\tonMount(() => {\n\t\tctx = canvas.getContext('2d')\n\t\ttouchToMouse(canvas)\n\t})\n\n\t$: dim = getDimension(dimension)\n\n\t$: value = color.get(dim.scale, dim.dim) * dim.data.scale\n\t$: sliderPos = (cWidth - 2) * (value - dim.data.extent[0]) / (dim.data.extent[1] - dim.data.extent[0])\n\n\t$: {\n\t\tif (ctx) {\n\t\t\tctx.imageSmoothingEnabled = false\n\t\t\tctx.clearRect(0, 0, cWidth, cHeight)\n\n\t\t\tlet d = Math.min(detail, cWidth - 2)\n\t\t\tlet xStep = (cWidth - 2) / d\n\t\t\tlet range = dim.data.extent[1] - dim.data.extent[0]\n\n\t\t\tconst colBase = color.to(dim.scale)\n\n\t\t\tfor(let i = 0; i <= d; i++) {\n\t\t\t\tconst v = (i / d * range + dim.data.extent[0]) / dim.data.scale\n\t\t\t\tconst col = colBase.alter(dim.scale, dim.dim, v)\n\t\t\t\tctx.fillStyle = col.toHex()\n\t\t\t\tctx.fillRect(Math.round(i * xStep), 0, Math.ceil(xStep), cHeight)\n\t\t\t}\n\n\t\t\tctx.fillStyle = '#ffffff'\n\t\t\tctx.fillRect(sliderPos - 1, 0, 3, cHeight)\n\n\t\t\tctx.fillStyle = '#000000'\n\t\t\tctx.fillRect(sliderPos, 0, 1, cHeight)\n\t\t}\n\t}\n\n\tfunction onMouse(e) {\n\t\tif (e.buttons === 1) {\n\t\t\tconst pos = relativePosition(e)\n\t\t\tlet x = pos.relativeX\n\n\t\t\tlet v = (x / (cWidth - 2)) * (dim.data.extent[1] - dim.data.extent[0]) + dim.data.extent[0]\n\t\t\tif (v > dim.data.extent[1]) { v = dim.data.extent[1] }\n\t\t\tif (v < dim.data.extent[0]) { v = dim.data.extent[0] }\n\t\t\tcolor = color.alter(dim.scale, dim.dim, v / dim.data.scale)\n\t\t}\n\t}\n</script>\n\n<div class='scrollbar' bind:clientWidth={cWidth} bind:clientHeight={cHeight}>\n\t<canvas bind:this={canvas} width={width} height={height} on:mousedown={onMouse} on:mousemove={onMouse}>\n</div>\n\n<style>\n\t.scrollbar, canvas {\n\t\tdisplay: inline-block;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tline-height: 0;\n\t}\n\n\tcanvas {\n\t\tborder: 1px solid #000;\n\t\tborder-radius: 2px;\n\t\tcursor: col-resize;\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}